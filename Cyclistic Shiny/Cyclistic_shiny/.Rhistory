shiny::runApp()
runApp()
librarian::shelf(dplyr, data.table, ggplot2, plotly, shiny, leaflet)
mydata <- readRDS(file = "mydata.rds")
getColor <- function(member) {
sapply(mydata$member_casual, function(member) {
if(member == "Casual") {
"green"
} else {
"red"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(mydata)
)
View(mydata)
mydata <- readRDS(file = "mydata.rds") %>%
select(-c(end_lng, end_lat)) %>%
mutate(lat = start_lat,
lng = start_lng)
View(mydata)
mydata <- readRDS(file = "mydata.rds") %>%
mutate(lat = start_lat,
lng = start_lng) %>%
select(-c(end_lng, end_lat, start_lat, end_lat)) %>%
saveRDS(file = "mydata.RDS")
mydata <- readRDS(file = "mydata.rds") %>%
mutate(lat = start_lat,
lng = start_lng) %>%
select(-c(end_lng, end_lat, start_lat, end_lat)) %>%
saveRDS(file = "data.rds")
mydata <- readRDS(file = "data.rds")
librarian::shelf(dplyr, data.table, ggplot2, plotly, shiny, leaflet)
mydata <- readRDS(file = "data.rds")
View(mydata)
runApp()
View(mydata)
runApp()
mydata %>%
sample_n(size = 50) %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = lng, lat = lat, icon=icons,
label=~as.character(member_casual),
clusterOptions = markerClusterOptions())
mydata %>%
sample_n(size = 50) %>%
leaflet() %>%
addTiles() %>%
addMarkers()
runApp()
View(mydata)
runApp()
class(mydata$member_casual)
runApp()
pal <- colorFactor(palette = c("red", "blue"), domain = mydata$member_casual)
View(pal)
runApp()
pal(mydata$member_casual)
runApp()
View(mydata)
runApp()
ggplot(mydata) +
geom_histogram(aes(x=ride_length, fill = member_casual)) +
xlim(0, 10000) +
labs(fill = "Casual User or Member?") +
xlab("Length of Time (s)") +
ggtitle(paste("Distribution of ","Length of Time (s)"," by Member Status")) +
theme_bw()
runApp()
librarian::shelf(dplyr, data.table, ggplot2, plotly, shiny, leaflet)
mydata <- readRDS(file = "data.rds")
View(mydata)
runApp()
shiny::runApp()
runApp()
fluidPage(theme = shinythemes::shinytheme("yeti"),
navbarPage(
title = "Google's Cyclistic Data Shiny App",
theme = shinythemes::shinytheme("yeti"),
tabPanel("Documentation",
mainPanel(
h2(strong("A Quick Run-Down"), align = "left"),
p("This simple Shiny webpage was created as the final assignment for the", em('Creating Data Products'),
"Coursera course. It contains two tabs: a plot tab and a map tab. These two tabs constitute a portion of the prveious two
assignments for this course. I simply edited those assignments' code to be used in a Shiny application easily. This was because I wasn't so much concerned
with the content of the tabs as I was in demonstrating basic Shiny skills."),
h4(strong("The basic assignment is as follows:")),
p("- Write a shiny application with associated supporting documentation. The documentation should be thought of as whatever a user will need to get started using your application."),
p("Deploy the application on Rstudio's shiny server."),
p("- Share the application link by pasting it into the provided text box."),
p("- Share your server.R and ui.R code on github."),
h4(strong("Requirements:")),
p("- Some form of input (widget: textbox, radio button, checkbox, ...)"),
p("- Some operation on the ui input in sever.R"),
p("- Some reactive output displayed as a result of server calculations"),
p("- You must also include enough documentation so that a novice user could use your application."))
),
tabPanel("Plots",
sidebarPanel(
tags$h3("Which variable?"),
selectInput("variable_cont", "Choices (continuous):",
choices = list("Ride Length (s)" = "length",
"Ride Distance (m) " = "dist"
)),
selectInput("variable_cat", "Choices (discrete):",
choices = list("Day of the Week" = "weekday",
"Type of Bike" = "type"
))
),
mainPanel(
plotly::plotlyOutput("plot1"),
plotly::plotlyOutput("plot2")
)
),
tabPanel("Maps",
sidebarPanel(
tags$h3("Options"),
sliderInput("count", "Number of Observations:",
min = 0, max = 2000,
value = 500),
sliderInput("radius", "Marker Cluster Radius:",
min = 0, max = 200,
value = 80)
),
mainPanel(
leaflet::leafletOutput("mymap", height = 800)
)
))
runApp()
library("librarian")
runApp()
remotes::install_github("DesiQuintans/librarian")
library(librarian)
runApp()
install.packages("revealjs")
